# Copyright (c) 2023 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
#
# THIS IS A GENERATED DOCKERFILE.
#
# This file was assembled from multiple pieces, whose use is documented
# throughout. Please refer to the TensorFlow dockerfiles documentation
# for more information.
#
# ============================================================================
# How to build: 
#   docker build ./ -f Dockerfile.llm -t llm_centos8:latest
# If you need to use proxy, please use the following command
#   docker build ./ --build-arg http_proxy=${http_proxy} --build-arg https_proxy=${http_proxy} -f Dockerfile.llm -t llm_centos8:latest

FROM centos:centos8
WORKDIR /opt/installs/
ENV http_proxy=http://child-prc.intel.com:913
ENV https_proxy=http://child-prc.intel.com:913
RUN dnf --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos -y && \
    yum update -y && yum install -y unzip which zip vim wget  && \
    yum -y install epel-release && \
    yum -y install git openssl-devel make gcc-c++ automake autoconf libtool python3 python3-pip \
         graphviz numactl* mesa-libGL && \
    yum -y groupinstall "Development Tools" && \
    yum -y install gcc-toolset-12.3* cmake expect libfabric && \
    yum -y install libsndfile

# Build LLVM for IPEX Semi-compiler
RUN cd /opt/installs && git clone --depth 1 --branch llvmorg-13.0.0 https://github.com/llvm/llvm-project && \
    cd llvm-project && mkdir build && cd build && \
    cmake ../llvm -DCMAKE_INSTALL_PREFIX=/opt/llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_ENABLE_TERMINFO=OFF -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" && \
    make install -j && \
    ln -s /opt/llvm/bin/llvm-config /usr/local/bin/llvm-config-13

# Prepare the Conda environment
RUN cd /opt/installs && wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O anaconda3.sh && \
    chmod +x anaconda3.sh && \
    ./anaconda3.sh -b -p ~/anaconda3 && \
    rm ./anaconda3.sh

ENV PATH=~/anaconda3/bin/:${PATH}
RUN export PATH=~/anaconda3/bin/:${PATH} && \
    conda config --add channels intel && \
    conda install -c intel -y intel-openmp && \
    conda create -yn llm python=3.9 && \
    source activate llm && \
    pip install pip && \
    pip install lark-parser hypothesis tornado tqdm  Pillow  yacs opencv-python pycocotools cityscapesscripts unidecode inflect \
	    librosa==0.8.1 toml soundfile==0.10.3.post1 ipdb sox tensorboard==2.0.0 jinja2 psutil pytest scikit-learn onnx && \
    conda config --add channels intel && \
    conda install -y openblas  && \
    conda install gperftools -c conda-forge -y && \
    pip install intel-openmp matplotlib typing_extensions future six requests dataclasses \
        ninja pyyaml setuptools cmake cffi typing intel-openmp mkl mkl-include numpy cpuid datasets pip install sympy && \
    pip install accelerate protobuf==3.20.3 numpy==1.23.5 && \
    pip install transformers==4.28.1 cpuid accelerate datasets sentencepiece protobuf==3.20.3 && \
    
    pip install torch==2.1.0.dev20230711+cpu torchvision==0.16.0.dev20230711+cpu torchaudio==2.1.0.dev20230711+cpu --index-url https://download.pytorch.org/whl/nightly/cpu && \
    pip install https://intel-extension-for-pytorch.s3.amazonaws.com/ipex_dev/cpu/intel_extension_for_pytorch-2.1.0.dev0%2Bcpu.llm-cp39-cp39-linux_x86_64.whl && \
    conda install -y libstdcxx-ng=12 -c conda-forge

RUN /root/anaconda3/bin/conda clean -y -all && \
    yum clean all && \
    rm -rf /opt/installs/

ENV BASH_ENV=/opt/.bash_profile
# Env config
ENV KMP_BLOCKTIME=1
ENV KMP_AFFINITY="granularity=fine,compact,1,0"
# IOMP & TcMalloc
ENV LD_PRELOAD=/root/anaconda3/envs/llm/lib/libiomp5.so:/root/anaconda3/envs/llm/lib/libtcmalloc.so:${LD_PRELOAD}
WORKDIR /root/workspace/
ENV WORKSPACE=/root/workspace
